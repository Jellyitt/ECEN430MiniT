//Bosch BNO055 libraries
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>

//ROS libraries
#include <ros.h>
#include <ArduinoHardware.h>
#include <geometry_msgs/Twist.h>

//#define led_pin 13
#define max_x 1.5
#define max_y 1.5
#define max_Th 3

#define BNO055_SAMPLERATE_DELAY_MS (1000)

Adafruit_BNO055 bno = Adafruit_BNO055();

volatile float linear_v_x, linear_v_y, linear_v_z;
volatile float angular_v_x, angular_v_y, angular_v_z;

ros::NodeHandle nh;

//motor 1 -- Err(LOW) = forward motion/counter-clockwise
#define PWM1 6 //Port A, pin 31
#define En1 8 //Port A, pin 23
#define Err1 3 //Port A, pin 25

//motor 2 -- Err(HIGH) = forward motion/clockwise
#define PWM2 10 //Port A, pin 29
#define En2 7 //Port A, pin 19
#define Err2 5 //Port A, pin 21

//motor 3 -- Err(HIGH) = clockwise motion
#define PWM3 9 //Port A, pin 27
#define En3 4 //Port A, pin 15
#define Err3 2 //Port A, pin 17


void messageCb(const geometry_msgs::Twist& val){
  float val_x = val.linear.x;
  float val_y = val.linear.y;
  float val_Th = val.angular.z;
  int speed_x, speed_y, speed_Th;
  if(val_x == 0 && val_y == 0 && val_Th == 0){
    digitalWrite(En1, LOW);
    digitalWrite(En2, LOW);
    digitalWrite(En3, LOW);
  }
  else{
    int x = calcX(val_x);
    int y = calcY(val_y);
    int Th = calcTh(val_Th);

    if(x != 0 && Th != 0){
      if(Th > 0){
        speed_x = (-1*x)/4 + Th;
        speed_y = x/1.5 + Th;
        speed_Th = (-1*Th);
        }
        else{
        speed_x = (-1*x)/1.5 + Th;
        speed_y = x/4 + Th;
        speed_Th = (-1*Th);
        }
      }
    else{
      speed_x = (-1*x) + Th;
      speed_y = x + Th;
      speed_Th = (-1*Th);
    }
    
    set_dir(sign(speed_x, Th), sign(speed_y, Th), sign(0, speed_Th * -1));
    drive_motors(min(abs(0.7*speed_x), 229), min(abs(0.7*speed_y), 229), min(0.7*abs(speed_Th), 229));
  }
}

ros::Subscriber<geometry_msgs::Twist> sub("/cmd_vel", &messageCb );
geometry_msgs::Twist imu_msg;
ros::Publisher imu_data("imu/data", &imu_msg);

void setup() {
  TCCR1B = TCCR1B & B11111000 | B00000010; // for PWM frequency of 3921.16 Hz  -> pins 9 + 10
  TCCR2B = TCCR2B & B11111000 | B00000010; // for PWM frequency of 3921.16 Hz  -> pin 11

  pinMode(PWM3, OUTPUT);
  pinMode(En3, OUTPUT);
  pinMode(Err3, OUTPUT);
  pinMode(PWM2, OUTPUT);
  pinMode(En2, OUTPUT);
  pinMode(Err2, OUTPUT);
  pinMode(PWM1, OUTPUT);
  pinMode(En1, OUTPUT);
  pinMode(Err1, OUTPUT);
  //pinMode(led_pin, OUTPUT);
  
  linear_v_x = 0;
  linear_v_y = 0;
  linear_v_z = 0;
  angular_v_x = 0;
  angular_v_y = 0;
  angular_v_z = 0;
  
  bno.setExtCrystalUse(true);
 
  nh.initNode();
  nh.subscribe(sub);
  nh.advertise(imu_data);
}

void loop(){
  while(!nh.connected()){
  nh.spinOnce();
  imu_update();
  }
  
  //digitalWrite(led_pin, LOW);
  //delay(100);
  //digitalWrite(led_pin,LOW);
}

void imu_update(){
  imu::Vector<3> gyro = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
  linear_v_x = gyro.x();
  linear_v_y = gyro.y();
  linear_v_z = gyro.z();

  imu::Vector<3> accel = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
  angular_v_x = accel.x();
  angular_v_y = accel.y();
  angular_v_z = accel.z();

  delay(BNO055_SAMPLERATE_DELAY_MS);

  // update geometry msg
  imu_msg.linear.x= linear_v_x;
  imu_msg.linear.y= linear_v_y;
  imu_msg.linear.z= linear_v_z;
  imu_msg.angular.x= angular_v_x;
  imu_msg.angular.y= angular_v_y;
  imu_msg.angular.z= angular_v_z;

  imu_data.publish(&imu_msg);

}

//Motor speeds
int calcX(float i){
  float speedFrac = i/max_x;
  return (int)(speedFrac*250);
}

int calcY(float i){
  float speedFrac = i/max_y;
  return (int)(speedFrac*250);
}

int calcTh(float i){
  float speedFrac = i/max_Th;
  return (int)(speedFrac*250);
}

//Motor Direction
int sign(float spd, float turn){
  if(turn != 0){
    if(turn < 0){
      return LOW;
    }
    else{
      return HIGH;
    }
  }
  else{
  if(spd < 0){
    return LOW;
  }
  else{
    return HIGH;
  }
  }
}

//Set motors
void set_dir(int sgn1, int sgn2, int sgn3){
  digitalWrite(Err1, sgn1);
  digitalWrite(Err2, sgn2);
  digitalWrite(Err3, sgn3);
}

void drive_motors(int pwm_1, int pwm_2, int pwm_3){
  digitalWrite(En1, HIGH);
  digitalWrite(En2, HIGH);
  digitalWrite(En3, HIGH);
  analogWrite(PWM1, pwm_1);
  analogWrite(PWM2, pwm_2);
  analogWrite(PWM3, pwm_3);
}